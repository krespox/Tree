<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="63836443-1a02-4c80-82c3-2fd3c36bbc2b" name="Changes" comment="">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="PREVIOUS_COMMIT_AUTHORS">
      <list>
        <option value="Krystian &lt;krystiankaaluzny@gmail.com&gt;" />
      </list>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="MarkdownSettingsMigration">
    <option name="stateVersion" value="1" />
  </component>
  <component name="ProjectId" id="2OHwm5qSrX8kUvJtuKAS3uycrKt" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;ASKED_SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/Users/Krystian/Desktop/Email_Microservice-b232100d71265a1650fed678340e5d102ce02b82/Tree&quot;
  }
}</component>
  <component name="RunManager" selected="Application.Main">
    <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="Main" />
      <module name="Tree" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Tree" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="Tree" />
      <module name="Tree" />
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.Main" />
        <item itemvalue="Application.Tree" />
      </list>
    </recent_temporary>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="63836443-1a02-4c80-82c3-2fd3c36bbc2b" name="Changes" comment="" />
      <created>1681230972957</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1681230972957</updated>
    </task>
    <task id="LOCAL-00001" summary="This project consists of three classes: TreeNode, Tree, and Main. The TreeNode class represents a node in a binary tree and contains a value, a reference to the left child, and a reference to the right child. The Tree class represents a binary tree and provides methods to get the leaf nodes, the length of the longest path from the root to a leaf node, and to check if two trees are equivalent. The Main class creates two instances of Tree and performs some operations such as getting leaf nodes, finding the longest path, and checking if the two trees are equivalent.">
      <created>1681306384334</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1681306384334</updated>
    </task>
    <task id="LOCAL-00002" summary="This project consists of three classes: TreeNode, Tree, and Main. The TreeNode class represents a node in a binary tree and contains a value, a reference to the left child, and a reference to the right child. The Tree class represents a binary tree and provides methods to get the leaf nodes, the length of the longest path from the root to a leaf node, and to check if two trees are equivalent. The Main class creates two instances of Tree and performs some operations such as getting leaf nodes, finding the longest path, and checking if the two trees are equivalent.">
      <created>1681306553606</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1681306553606</updated>
    </task>
    <task id="LOCAL-00003" summary="This project consists of three classes: TreeNode, Tree, and Main. The TreeNode class represents a node in a binary tree and contains a value, a reference to the left child, and a reference to the right child. The Tree class represents a binary tree and provides methods to get the leaf nodes, the length of the longest path from the root to a leaf node, and to check if two trees are equivalent. The Main class creates two instances of Tree and performs some operations such as getting leaf nodes, finding the longest path, and checking if the two trees are equivalent.">
      <created>1681306746175</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1681306746176</updated>
    </task>
    <task id="LOCAL-00004" summary="This project consists of three classes: TreeNode, Tree, and Main. The TreeNode class represents a node in a binary tree and contains a value, a reference to the left child, and a reference to the right child. The Tree class represents a binary tree and provides methods to get the leaf nodes, the length of the longest path from the root to a leaf node, and to check if two trees are equivalent. The Main class creates two instances of Tree and performs some operations such as getting leaf nodes, finding the longest path, and checking if the two trees are equivalent.">
      <created>1681306784442</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1681306784442</updated>
    </task>
    <task id="LOCAL-00005" summary="This project consists of three classes: TreeNode, Tree, and Main. The TreeNode class represents a node in a binary tree and contains a value, a reference to the left child, and a reference to the right child. The Tree class represents a binary tree and provides methods to get the leaf nodes, the length of the longest path from the root to a leaf node, and to check if two trees are equivalent. The Main class creates two instances of Tree and performs some operations such as getting leaf nodes, finding the longest path, and checking if the two trees are equivalent.">
      <created>1681306813219</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1681306813219</updated>
    </task>
    <task id="LOCAL-00006" summary="This project consists of three classes: TreeNode, Tree, and Main. The TreeNode class represents a node in a binary tree and contains a value, a reference to the left child, and a reference to the right child. The Tree class represents a binary tree and provides methods to get the leaf nodes, the length of the longest path from the root to a leaf node, and to check if two trees are equivalent. The Main class creates two instances of Tree and performs some operations such as getting leaf nodes, finding the longest path, and checking if the two trees are equivalent.">
      <created>1681306873573</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1681306873573</updated>
    </task>
    <task id="LOCAL-00007" summary="This project consists of three classes: TreeNode, Tree, and Main. The TreeNode class represents a node in a binary tree and contains a value, a reference to the left child, and a reference to the right child. The Tree class represents a binary tree and provides methods to get the leaf nodes, the length of the longest path from the root to a leaf node, and to check if two trees are equivalent. The Main class creates two instances of Tree and performs some operations such as getting leaf nodes, finding the longest path, and checking if the two trees are equivalent.">
      <created>1681306913218</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1681306913218</updated>
    </task>
    <task id="LOCAL-00008" summary="This project consists of three classes: TreeNode, Tree, and Main. The TreeNode class represents a node in a binary tree and contains a value, a reference to the left child, and a reference to the right child. The Tree class represents a binary tree and provides methods to get the leaf nodes, the length of the longest path from the root to a leaf node, and to check if two trees are equivalent. The Main class creates two instances of Tree and performs some operations such as getting leaf nodes, finding the longest path, and checking if the two trees are equivalent.">
      <created>1681307223591</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1681307223591</updated>
    </task>
    <task id="LOCAL-00009" summary="This project consists of three classes: TreeNode, Tree, and Main. The TreeNode class represents a node in a binary tree and contains a value, a reference to the left child, and a reference to the right child. The Tree class represents a binary tree and provides methods to get the leaf nodes, the length of the longest path from the root to a leaf node, and to check if two trees are equivalent. The Main class creates two instances of Tree and performs some operations such as getting leaf nodes, finding the longest path, and checking if the two trees are equivalent.">
      <created>1681307530355</created>
      <option name="number" value="00009" />
      <option name="presentableId" value="LOCAL-00009" />
      <option name="project" value="LOCAL" />
      <updated>1681307530355</updated>
    </task>
    <option name="localTasksCounter" value="10" />
    <servers />
  </component>
  <component name="Vcs.Log.Tabs.Properties">
    <option name="TAB_STATES">
      <map>
        <entry key="MAIN">
          <value>
            <State />
          </value>
        </entry>
      </map>
    </option>
  </component>
  <component name="VcsManagerConfiguration">
    <option name="CHECK_CODE_CLEANUP_BEFORE_PROJECT_COMMIT" value="true" />
    <MESSAGE value="This project consists of three classes: TreeNode, Tree, and Main. The TreeNode class represents a node in a binary tree and contains a value, a reference to the left child, and a reference to the right child. The Tree class represents a binary tree and provides methods to get the leaf nodes, the length of the longest path from the root to a leaf node, and to check if two trees are equivalent. The Main class creates two instances of Tree and performs some operations such as getting leaf nodes, finding the longest path, and checking if the two trees are equivalent." />
    <option name="LAST_COMMIT_MESSAGE" value="This project consists of three classes: TreeNode, Tree, and Main. The TreeNode class represents a node in a binary tree and contains a value, a reference to the left child, and a reference to the right child. The Tree class represents a binary tree and provides methods to get the leaf nodes, the length of the longest path from the root to a leaf node, and to check if two trees are equivalent. The Main class creates two instances of Tree and performs some operations such as getting leaf nodes, finding the longest path, and checking if the two trees are equivalent." />
  </component>
</project>